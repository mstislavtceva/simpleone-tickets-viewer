document.addEventListener("DOMContentLoaded", async () => {
  const container = document.getElementById("ticket-container");
  const DATE_THRESHOLD = new Date("2025-01-01");

  function formatDate(isoString) {
    const date = new Date(isoString);
    return date.toLocaleDateString();
  }

  function renderError(message) {
    container.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${message}</div>`;
  }

  function renderTickets(tickets) {
    const table = document.createElement("table");
    const thead = document.createElement("thead");
    const headerRow = document.createElement("tr");

    ["–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].forEach((text) => {
      const th = document.createElement("th");
      th.textContent = text;
      headerRow.appendChild(th);
    });

    thead.appendChild(headerRow);
    table.appendChild(thead);

    const tbody = document.createElement("tbody");

    tickets.forEach((ticket) => {
      const row = document.createElement("tr");
      const createdDate = new Date(ticket.created_at);
      const isNew = createdDate > DATE_THRESHOLD;

      const numberCell = document.createElement("td");
      numberCell.textContent = ticket.number;

      const statusCell = document.createElement("td");
      statusCell.textContent = ticket.status;

      const dateCell = document.createElement("td");
      dateCell.textContent = formatDate(ticket.created_at);

      if (isNew) {
        row.classList.add("new-ticket");
        dateCell.title = "–°–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ 01.01.2025";
        const icon = document.createElement("span");
        icon.textContent = " üïí";
        dateCell.appendChild(icon);
      }

      row.appendChild(numberCell);
      row.appendChild(statusCell);
      row.appendChild(dateCell);
      tbody.appendChild(row);
    });

    table.appendChild(tbody);
    container.innerHTML = "";
    container.appendChild(table);
  }

  try {
    const tickets = await fetchOpenTickets();

    if (!Array.isArray(tickets)) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
    }

    renderTickets(tickets);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤:", error);
    renderError(error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
  }
});
